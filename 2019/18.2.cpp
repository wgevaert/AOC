#include <iostream>
#include <string>
#include <vector>

#define NORTH 1
#define SOUTH 2
#define WEST 3
#define EAST 4

const std::vector<std::pair<int,int>> path = {{63,24}, {63,23}, {63,22}, {63,21}, {63,20}, {63,19}, {63,18}, {63,17}, {62,17}, {61,17}, {60,17}, {59,17}, {59,18}, {59,19}, {59,20}, {59,21}, {58,21}, {57,21}, {57,20}, {57,19}, {56,19}, {55,19}, {55,20}, {55,21}, {55,22}, {55,23}, {56,23}, {57,23}, {57,24}, {57,25}, {56,25}, {55,25}, {54,25}, {53,25}, {52,25}, {51,25}, {50,25}, {49,25}, {49,24}, {49,23}, {50,23}, {51,23}, {52,23}, {53,23}, {53,22}, {53,21}, {52,21}, {51,21}, {50,21}, {49,21}, {48,21}, {47,21}, {47,20}, {47,19}, {46,19}, {45,19}, {45,20}, {45,21}, {45,22}, {45,23}, {45,24}, {45,25}, {46,25}, {47,25}, {47,26}, {47,27}, {47,28}, {47,29}, {47,30}, {47,31}, {46,31}, {45,31}, {45,30}, {45,29}, {45,28}, {45,27}, {44,27}, {43,27}, {42,27}, {41,27}, {41,26}, {41,25}, {42,25}, {43,25}, {43,24}, {43,23}, {43,22}, {43,21}, {42,21}, {41,21}, {41,20}, {41,19}, {42,19}, {43,19}, {43,18}, {43,17}, {44,17}, {45,17}, {45,16}, {45,15}, {44,15}, {43,15}, {42,15}, {41,15}, {41,14}, {41,13}, {42,13}, {43,13}, {44,13}, {45,13}, {46,13}, {47,13}, {47,12}, {47,11}, {46,11}, {45,11}, {45,10}, {45,9}, {46,9}, {47,9}, {47,8}, {47,7}, {48,7}, {49,7}, {49,8}, {49,9}, {50,9}, {51,9}, {52,9}, {53,9}, {53,8}, {53,7}, {54,7}, {55,7}, {56,7}, {57,7}, {57,8}, {57,9}, {56,9}, {55,9}, {55,10}, {55,11}, {56,11}, {57,11}, {57,12}, {57,13}, {56,13}, {55,13}, {55,14}, {55,15}, {55,16}, {55,17}, {56,17}, {57,17}, {57,16}, {57,15}, {58,15}, {59,15}, {60,15}, {61,15}, {61,14}, {61,13}, {61,12}, {61,11}, {60,11}, {59,11}, {59,10}, {59,9}, {59,8}, {59,7}, {59,6}, {59,5}, {59,4}, {59,3}, {58,3}, {57,3}, {56,3}, {55,3}, {55,4}, {55,5}, {54,5}, {53,5}, {52,5}, {51,5}, {51,4}, {51,3}, {50,3}, {49,3}, {49,2}, {49,1}, {50,1}, {51,1}, {52,1}, {53,1}, {54,1}, {55,1}, {56,1}, {57,1}, {58,1}, {59,1}, {60,1}, {61,1}, {61,2}, {61,3}, {61,4}, {61,5}, {61,6}, {61,7}, {61,8}, {61,9}, {62,9}, {63,9}, {63,10}, {63,11}, {63,12}, {63,13}, {63,14}, {63,15}, {64,15}, {65,15}, {65,14}, {65,13}, {66,13}, {67,13}, {68,13}, {69,13}, {69,14}, {69,15}, {69,16}, {69,17}, {68,17}, {67,17}, {66,17}, {65,17}, {65,18}, {65,19}, {65,20}, {65,21}, {65,22}, {65,23}, {65,24}, {65,25}, {66,25}, {67,25}, {67,24}, {67,23}, {67,22}, {67,21}, {68,21}, {69,21}, {70,21}, {71,21}, {71,20}, {71,19}, {72,19}, {73,19}, {74,19}, {75,19}, {75,20}, {75,21}, {74,21}, {73,21}, {73,22}, {73,23}, {72,23}, {71,23}, {71,24}, {71,25}, {72,25}, {73,25}, {74,25}, {75,25}, {75,24}, {75,23}, {76,23}, {77,23}, {78,23}, {79,23}, {79,24}, {79,25}, {79,26}, {79,27}, {78,27}, {77,27}, {76,27}, {75,27}, {74,27}, {73,27}, {72,27}, {71,27}, {71,28}, {71,29}, {72,29}, {73,29}, {74,29}, {75,29}, {76,29}, {77,29}, {78,29}, {79,29}, {79,30}, {79,31}, {79,32}, {79,33}, {79,34}, {79,35}, {78,35}, {77,35}, {76,35}, {75,35}, {75,36}, {75,37}, {76,37}, {77,37}, {77,38}, {77,39}, {76,39}, {75,39}, {74,39}, {73,39}, {72,39}, {71,39}, {70,39}, {69,39}, {69,38}, {69,37}, {69,36}, {69,35}, {69,34}, {69,33}, {68,33}, {67,33}, {66,33}, {65,33}, {65,34}, {65,35}, {64,35}, {63,35}, {63,36}, {63,37}, {64,37}, {65,37}, {65,38}, {65,39}, {64,39}, {63,39}, {62,39}, {61,39}, {60,39}, {59,39}, {59,38}, {59,37}, {60,37}, {61,37}, {61,36}, {61,35}, {61,34}, {61,33}, {60,33}, {59,33}, {59,34}, {59,35}, {58,35}, {57,35}, {57,36}, {57,37}, {56,37}, {55,37}, {55,38}, {55,39}, {54,39}, {53,39}, {52,39}, {51,39}, {50,39}, {49,39}, {49,38}, {49,37}, {49,36}, {49,35}, {48,35}, {47,35}, {47,34}, {47,33}, {46,33}, {45,33}, {44,33}, {43,33}, {43,34}, {43,35}, {44,35}, {45,35}, {45,36}, {45,37}, {44,37}, {43,37}, {42,37}, {41,37}, {41,38}, {41,39}, {40,39}, {39,39}, {39,38}, {39,37}, {39,36}, {39,35}, {39,34}, {39,33}, {39,32}, {39,31}, {39,30}, {39,29}, {39,28}, {39,27}, {39,26}, {39,25}, {39,24}, {39,23}, {39,22}, {39,21}, {39,20}, {39,19}, {38,19}, {37,19}, {37,18}, {37,17}, {36,17}, {35,17}, {34,17}, {33,17}, {33,18}, {33,19}, {33,20}, {33,21}, {33,22}, {33,23}, {32,23}, {31,23}, {30,23}, {29,23}, {29,22}, {29,21}, {30,21}, {31,21}, {31,20}, {31,19}, {30,19}, {29,19}, {28,19}, {27,19}, {26,19}, {25,19}, {25,20}, {25,21}, {24,21}, {23,21}, {23,20}, {23,19}, {22,19}, {21,19}, {21,18}, {21,17}, {22,17}, {23,17}, {23,16}, {23,15}, {23,14}, {23,13}, {22,13}, {21,13}, {20,13}, {19,13}, {19,12}, {19,11}, {20,11}, {21,11}, {21,10}, {21,9}, {21,8}, {21,7}, {20,7}, {19,7}, {19,6}, {19,5}, {20,5}, {21,5}, {22,5}, {23,5}, {23,6}, {23,7}, {23,8}, {23,9}, {23,10}, {23,11}, {24,11}, {25,11}, {26,11}, {27,11}, {28,11}, {29,11}, {29,10}, {29,9}, {30,9}, {31,9}, {31,8}, {31,7}, {30,7}, {29,7}, {29,6}, {29,5}, {28,5}, {27,5}, {27,4}, {27,3}, {26,3}, {25,3}, {24,3}, {23,3}, {23,2}, {23,1}, {22,1}, {21,1}, {20,1}, {19,1}, {19,2}, {19,3}, {18,3}, {17,3}, {16,3}, {15,3}, {14,3}, {13,3}, {13,4}, {13,5}, {14,5}, {15,5}, {16,5}, {17,5}, {17,6}, {17,7}, {16,7}, {15,7}, {15,8}, {15,9}, {15,10}, {15,11}, {16,11}, {17,11}, {17,12}, {17,13}, {16,13}, {15,13}, {14,13}, {13,13}, {12,13}, {11,13}, {11,14}, {11,15}, {10,15}, {9,15}, {8,15}, {7,15}, {7,14}, {7,13}, {8,13}, {9,13}, {9,12}, {9,11}, {8,11}, {7,11}, {6,11}, {5,11}, {5,12}, {5,13}, {5,14}, {5,15}, {5,16}, {5,17}, {5,18}, {5,19}, {6,19}, {7,19}, {7,18}, {7,17}, {8,17}, {9,17}, {9,18}, {9,19}, {9,20}, {9,21}, {9,22}, {9,23}, {9,24}, {9,25}, {8,25}, {7,25}, {7,24}, {7,23}, {7,22}, {7,21}, {6,21}, {5,21}, {5,22}, {5,23}, {5,24}, {5,25}, {5,26}, {5,27}, {4,27}, {3,27}, {2,27}, {1,27}, {1,28}, {1,29}, {2,29}, {3,29}, {3,30}, {3,31}, {3,32}, {3,33}, {3,34}, {3,35}, {3,36}, {3,37}, {2,37}, {1,37}, {1,38}, {1,39}, {2,39}, {3,39}, {4,39}, {5,39}, {6,39}, {7,39}, {8,39}, {9,39}, {10,39}, {11,39}, {12,39}, {13,39}, {14,39}, {15,39}, {15,38}, {15,37}, {15,36}, {15,35}, {15,34}, {15,33}, {16,33}, {17,33}, {17,34}, {17,35}, {17,36}, {17,37}, {18,37}, {19,37}, {19,36}, {19,35}, {19,34}, {19,33}, {19,32}, {19,31}, {19,30}, {19,29}, {18,29}, {17,29}, {17,28}, {17,27}, {16,27}, {15,27}, {15,26}, {15,25}, {16,25}, {17,25}, {18,25}, {19,25}, {19,26}, {19,27}, {20,27}, {21,27}, {21,26}, {21,25}, {22,25}, {23,25}, {23,24}, {23,23}, {22,23}, {21,23}, {20,23}, {19,23}, {19,22}, {19,21}, {19,22}, {19,23}, {20,23}, {21,23}, {22,23}, {23,23}, {23,24}, {23,25}, {22,25}, {21,25}, {21,26}, {21,27}, {20,27}, {19,27}, {19,26}, {19,25}, {18,25}, {17,25}, {16,25}, {15,25}, {15,26}, {15,27}, {16,27}, {17,27}, {17,28}, {17,29}, {18,29}, {19,29}, {19,30}, {19,31}, {19,32}, {19,33}, {19,34}, {19,35}, {19,36}, {19,37}, {18,37}, {17,37}, {17,36}, {17,35}, {17,34}, {17,33}, {16,33}, {15,33}, {15,34}, {15,35}, {15,36}, {15,37}, {15,38}, {15,39}, {14,39}, {13,39}, {12,39}, {11,39}, {10,39}, {9,39}, {8,39}, {7,39}, {6,39}, {5,39}, {4,39}, {3,39}, {2,39}, {1,39}, {1,38}, {1,37}, {2,37}, {3,37}, {3,36}, {3,35}, {3,34}, {3,33}, {3,32}, {3,31}, {3,30}, {3,29}, {2,29}, {1,29}, {1,28}, {1,27}, {2,27}, {3,27}, {4,27}, {5,27}, {5,26}, {5,25}, {5,24}, {5,23}, {5,22}, {5,21}, {6,21}, {7,21}, {7,22}, {7,23}, {7,24}, {7,25}, {8,25}, {9,25}, {9,24}, {9,23}, {9,22}, {9,21}, {9,20}, {9,19}, {9,18}, {9,17}, {8,17}, {7,17}, {7,18}, {7,19}, {6,19}, {5,19}, {5,18}, {5,17}, {5,16}, {5,15}, {5,14}, {5,13}, {5,12}, {5,11}, {6,11}, {7,11}, {8,11}, {9,11}, {9,12}, {9,13}, {8,13}, {7,13}, {7,14}, {7,15}, {8,15}, {9,15}, {10,15}, {11,15}, {11,14}, {11,13}, {12,13}, {13,13}, {14,13}, {15,13}, {16,13}, {17,13}, {17,12}, {17,11}, {16,11}, {15,11}, {15,10}, {15,9}, {15,8}, {15,7}, {16,7}, {17,7}, {17,6}, {17,5}, {16,5}, {15,5}, {14,5}, {13,5}, {13,4}, {13,3}, {14,3}, {15,3}, {16,3}, {17,3}, {18,3}, {19,3}, {19,2}, {19,1}, {20,1}, {21,1}, {22,1}, {23,1}, {23,2}, {23,3}, {24,3}, {25,3}, {26,3}, {27,3}, {27,4}, {27,5}, {28,5}, {29,5}, {29,6}, {29,7}, {30,7}, {31,7}, {31,8}, {31,9}, {30,9}, {29,9}, {29,10}, {29,11}, {28,11}, {27,11}, {26,11}, {25,11}, {24,11}, {23,11}, {23,10}, {23,9}, {23,8}, {23,7}, {23,6}, {23,5}, {22,5}, {21,5}, {20,5}, {19,5}, {19,6}, {19,7}, {20,7}, {21,7}, {21,8}, {21,9}, {21,10}, {21,11}, {20,11}, {19,11}, {19,12}, {19,13}, {20,13}, {21,13}, {22,13}, {23,13}, {23,14}, {23,15}, {23,16}, {23,17}, {22,17}, {21,17}, {21,18}, {21,19}, {22,19}, {23,19}, {23,20}, {23,21}, {24,21}, {25,21}, {25,20}, {25,19}, {26,19}, {27,19}, {28,19}, {29,19}, {30,19}, {31,19}, {31,20}, {31,21}, {30,21}, {29,21}, {29,22}, {29,23}, {30,23}, {31,23}, {32,23}, {33,23}, {33,22}, {33,21}, {33,20}, {33,19}, {33,18}, {33,17}, {34,17}, {35,17}, {36,17}, {37,17}, {37,18}, {37,19}, {38,19}, {39,19}, {39,20}, {39,21}, {39,22}, {39,23}, {39,24}, {39,25}, {39,26}, {39,27}, {39,28}, {39,29}, {39,30}, {39,31}, {39,32}, {39,33}, {39,34}, {39,35}, {39,36}, {39,37}, {39,38}, {39,39}, {39,40}, {39,41}, {40,41}, {41,41}, {41,42}, {41,43}, {42,43}, {43,43}, {43,44}, {43,45}, {42,45}, {41,45}, {41,46}, {41,47}, {42,47}, {43,47}, {44,47}, {45,47}, {45,48}, {45,49}, {44,49}, {43,49}, {42,49}, {41,49}, {41,50}, {41,51}, {41,52}, {41,53}, {41,54}, {41,55}, {41,56}, {41,57}, {41,58}, {41,59}, {41,60}, {41,61}, {41,62}, {41,63}, {41,64}, {41,65}, {42,65}, {43,65}, {43,66}, {43,67}, {43,68}, {43,69}, {42,69}, {41,69}, {41,70}, {41,71}, {42,71}, {43,71}, {43,72}, {43,73}, {42,73}, {41,73}, {41,74}, {41,75}, {42,75}, {43,75}, {43,76}, {43,77}, {42,77}, {41,77}, {41,78}, {41,79}, {41,78}, {41,77}, {42,77}, {43,77}, {43,76}, {43,75}, {42,75}, {41,75}, {41,74}, {41,73}, {42,73}, {43,73}, {43,72}, {43,71}, {42,71}, {41,71}, {41,70}, {41,69}, {42,69}, {43,69}, {43,68}, {43,67}, {43,66}, {43,65}, {42,65}, {41,65}, {41,64}, {41,63}, {41,62}, {41,61}, {41,60}, {41,59}, {41,58}, {41,57}, {41,56}, {41,55}, {41,54}, {41,53}, {42,53}, {43,53}, {43,54}, {43,55}, {44,55}, {45,55}, {46,55}, {47,55}, {48,55}, {49,55}, {50,55}, {51,55}, {52,55}, {53,55}, {53,54}, {53,53}, {54,53}, {55,53}, {56,53}, {57,53}, {58,53}, {59,53}, {59,54}, {59,55}, {58,55}, {57,55}, {57,56}, {57,57}, {57,58}, {57,59}, {57,60}, {57,61}, {56,61}, {55,61}, {54,61}, {53,61}, {53,62}, {53,63}, {53,64}, {53,65}, {54,65}, {55,65}, {55,64}, {55,63}, {56,63}, {57,63}, {58,63}, {59,63}, {59,64}, {59,65}, {59,66}, {59,67}, {59,68}, {59,69}, {58,69}, {57,69}, {57,68}, {57,67}, {56,67}, {55,67}, {54,67}, {53,67}, {53,68}, {53,69}, {53,70}, {53,71}, {53,72}, {53,73}, {54,73}, {55,73}, {55,74}, {55,75}, {55,76}, {55,77}, {54,77}, {53,77}, {52,77}, {51,77}, {51,78}, {51,79}, {52,79}, {53,79}, {54,79}, {55,79}, {56,79}, {57,79}, {57,78}, {57,77}, {57,76}, {57,75}, {58,75}, {59,75}, {59,74}, {59,73}, {60,73}, {61,73}, {61,74}, {61,75}, {62,75}, {63,75}, {63,74}, {63,73}, {64,73}, {65,73}, {65,72}, {65,71}, {64,71}, {63,71}, {63,70}, {63,69}, {64,69}, {65,69}, {65,68}, {65,67}, {65,66}, {65,65}, {65,64}, {65,63}, {66,63}, {67,63}, {67,64}, {67,65}, {68,65}, {69,65}, {69,66}, {69,67}, {69,68}, {69,69}, {68,69}, {67,69}, {67,70}, {67,71}, {68,71}, {69,71}, {70,71}, {71,71}, {71,70}, {71,69}, {71,68}, {71,67}, {72,67}, {73,67}, {74,67}, {75,67}, {76,67}, {77,67}, {78,67}, {79,67}, {79,66}, {79,65}, {79,64}, {79,63}, {79,62}, {79,61}, {79,60}, {79,59}, {79,58}, {79,57}, {79,56}, {79,55}, {79,54}, {79,53}, {79,52}, {79,51}, {79,50}, {79,49}, {78,49}, {77,49}, {76,49}, {75,49}, {75,50}, {75,51}, {74,51}, {73,51}, {73,50}, {73,49}, {73,48}, {73,47}, {73,46}, {73,45}, {74,45}, {75,45}, {76,45}, {77,45}, {77,44}, {77,43}, {77,42}, {77,41}, {77,42}, {77,43}, {77,44}, {77,45}, {76,45}, {75,45}, {74,45}, {73,45}, {73,46}, {73,47}, {73,48}, {73,49}, {73,50}, {73,51}, {74,51}, {75,51}, {75,50}, {75,49}, {76,49}, {77,49}, {78,49}, {79,49}, {79,50}, {79,51}, {79,52}, {79,53}, {78,53}, {77,53}, {76,53}, {75,53}, {75,54}, {75,55}, {75,56}, {75,57}, {75,58}, {75,59}, {75,60}, {75,61}, {76,61}, {77,61}, {77,62}, {77,63}, {77,64}, {77,65}, {76,65}, {75,65}, {74,65}, {73,65}, {73,64}, {73,63}, {73,62}, {73,61}, {73,60}, {73,59}, {73,58}, {73,57}, {73,56}, {73,55}, {73,54}, {73,53}, {72,53}, {71,53}, {71,52}, {71,51}, {71,50}, {71,49}, {71,48}, {71,47}, {71,46}, {71,45}, {70,45}, {69,45}, {69,44}, {69,43}, {69,42}, {69,41}, {68,41}, {67,41}, {67,42}, {67,43}, {67,44}, {67,45}, {67,46}, {67,47}, {66,47}, {65,47}, {64,47}, {63,47}, {63,46}, {63,45}, {62,45}, {61,45}, {61,46}, {61,47}, {60,47}, {59,47}, {59,48}, {59,49}, {59,50}, {59,51}, {60,51}, {61,51}, {61,52}, {61,53}, {61,54}, {61,55}, {62,55}, {63,55}, {64,55}, {65,55}, {65,56}, {65,57}, {65,56}, {65,55}, {64,55}, {63,55}, {62,55}, {61,55}, {61,54}, {61,53}, {61,52}, {61,51}, {60,51}, {59,51}, {59,50}, {59,49}, {59,48}, {59,47}, {60,47}, {61,47}, {61,46}, {61,45}, {62,45}, {63,45}, {63,46}, {63,47}, {64,47}, {65,47}, {66,47}, {67,47}, {67,46}, {67,45}, {67,44}, {67,43}, {67,42}, {67,41}, {68,41}, {69,41}, {69,42}, {69,43}, {69,44}, {69,45}, {70,45}, {71,45}, {71,46}, {71,47}, {71,48}, {71,49}, {71,50}, {71,51}, {71,52}, {71,53}, {72,53}, {73,53}, {73,54}, {73,55}, {73,56}, {73,57}, {73,58}, {73,59}, {73,60}, {73,61}, {73,62}, {73,63}, {73,64}, {73,65}, {74,65}, {75,65}, {76,65}, {77,65}, {77,64}, {77,63}, {77,62}, {77,61}, {76,61}, {75,61}, {75,60}, {75,59}, {75,58}, {75,57}, {75,56}, {75,55}, {75,54}, {75,53}, {76,53}, {77,53}, {78,53}, {79,53}, {79,54}, {79,55}, {79,56}, {79,57}, {79,58}, {79,59}, {79,60}, {79,61}, {79,62}, {79,63}, {79,64}, {79,65}, {79,66}, {79,67}, {78,67}, {77,67}, {76,67}, {75,67}, {74,67}, {73,67}, {72,67}, {71,67}, {71,68}, {71,69}, {71,70}, {71,71}, {70,71}, {69,71}, {68,71}, {67,71}, {67,70}, {67,69}, {68,69}, {69,69}, {69,68}, {69,67}, {69,66}, {69,65}, {68,65}, {67,65}, {67,64}, {67,63}, {66,63}, {65,63}, {65,64}, {65,65}, {65,66}, {65,67}, {65,68}, {65,69}, {64,69}, {63,69}, {63,70}, {63,71}, {64,71}, {65,71}, {65,72}, {65,73}, {64,73}, {63,73}, {63,74}, {63,75}, {62,75}, {61,75}, {61,74}, {61,73}, {60,73}, {59,73}, {59,74}, {59,75}, {58,75}, {57,75}, {57,76}, {57,77}, {57,78}, {57,79}, {58,79}, {59,79}, {60,79}, {61,79}, {62,79}, {63,79}, {64,79}, {65,79}, {66,79}, {67,79}, {68,79}, {69,79}, {70,79}, {71,79}, {71,78}, {71,77}, {72,77}, {73,77}, {73,76}, {73,75}, {73,74}, {73,73}, {74,73}, {75,73}, {75,74}, {75,75}, {76,75}, {77,75}, {77,74}, {77,73}, {77,72}, {77,71}, {77,70}, {77,69}, {78,69}, {79,69}, {79,70}, {79,71}, {79,72}, {79,73}, {79,74}, {79,75}, {79,76}, {79,77}, {79,78}, {79,79}, {78,79}, {77,79}, {76,79}, {75,79}, {75,78}, {75,77}, {76,77}, {77,77}, {76,77}, {75,77}, {75,78}, {75,79}, {76,79}, {77,79}, {78,79}, {79,79}, {79,78}, {79,77}, {79,76}, {79,75}, {79,74}, {79,73}, {79,72}, {79,71}, {79,70}, {79,69}, {78,69}, {77,69}, {77,70}, {77,71}, {77,72}, {77,73}, {77,74}, {77,75}, {76,75}, {75,75}, {75,74}, {75,73}, {74,73}, {73,73}, {73,74}, {73,75}, {73,76}, {73,77}, {72,77}, {71,77}, {71,78}, {71,79}, {70,79}, {69,79}, {68,79}, {67,79}, {66,79}, {65,79}, {64,79}, {63,79}, {62,79}, {61,79}, {60,79}, {59,79}, {58,79}, {57,79}, {56,79}, {55,79}, {54,79}, {53,79}, {52,79}, {51,79}, {51,78}, {51,77}, {52,77}, {53,77}, {54,77}, {55,77}, {55,76}, {55,75}, {55,74}, {55,73}, {54,73}, {53,73}, {53,72}, {53,71}, {53,70}, {53,69}, {53,68}, {53,67}, {54,67}, {55,67}, {56,67}, {57,67}, {57,68}, {57,69}, {58,69}, {59,69}, {59,68}, {59,67}, {59,66}, {59,65}, {59,64}, {59,63}, {58,63}, {57,63}, {56,63}, {55,63}, {55,64}, {55,65}, {54,65}, {53,65}, {53,64}, {53,63}, {53,62}, {53,61}, {54,61}, {55,61}, {56,61}, {57,61}, {57,60}, {57,59}, {57,58}, {57,57}, {57,56}, {57,55}, {58,55}, {59,55}, {59,54}, {59,53}, {58,53}, {57,53}, {56,53}, {55,53}, {54,53}, {53,53}, {53,54}, {53,55}, {52,55}, {51,55}, {50,55}, {49,55}, {48,55}, {47,55}, {46,55}, {45,55}, {44,55}, {43,55}, {43,54}, {43,53}, {42,53}, {41,53}, {41,52}, {41,51}, {41,50}, {41,49}, {42,49}, {43,49}, {44,49}, {45,49}, {45,48}, {45,47}, {44,47}, {43,47}, {42,47}, {41,47}, {41,46}, {41,45}, {42,45}, {43,45}, {43,44}, {43,43}, {42,43}, {41,43}, {41,42}, {41,41}, {40,41}, {39,41}, {39,42}, {39,43}, {39,44}, {39,45}, {39,46}, {39,47}, {38,47}, {37,47}, {37,48}, {37,49}, {37,50}, {37,51}, {38,51}, {39,51}, {39,52}, {39,53}, {38,53}, {37,53}, {37,54}, {37,55}, {36,55}, {35,55}, {34,55}, {33,55}, {33,56}, {33,57}, {34,57}, {35,57}, {36,57}, {37,57}, {38,57}, {39,57}, {39,58}, {39,59}, {39,60}, {39,61}, {38,61}, {37,61}, {36,61}, {35,61}, {34,61}, {33,61}, {33,62}, {33,63}, {32,63}, {31,63}, {30,63}, {29,63}, {29,64}, {29,65}, {28,65}, {27,65}, {27,66}, {27,67}, {27,68}, {27,69}, {27,70}, {27,71}, {28,71}, {29,71}, {29,70}, {29,69}, {29,68}, {29,67}, {30,67}, {31,67}, {31,66}, {31,65}, {32,65}, {33,65}, {33,66}, {33,67}, {34,67}, {35,67}, {35,68}, {35,69}, {36,69}, {37,69}, {37,68}, {37,67}, {37,66}, {37,65}, {37,64}, {37,63}, {38,63}, {39,63}, {39,64}, {39,65}, {39,66}, {39,67}, {39,68}, {39,69}, {39,70}, {39,71}, {39,72}, {39,73}, {38,73}, {37,73}, {37,74}, {37,75}, {38,75}, {39,75}, {39,76}, {39,77}, {39,78}, {39,79}, {38,79}, {37,79}, {37,78}, {37,77}, {36,77}, {35,77}, {34,77}, {33,77}, {32,77}, {31,77}, {31,76}, {31,75}, {32,75}, {33,75}, {33,74}, {33,73}, {32,73}, {31,73}, {30,73}, {29,73}, {28,73}, {27,73}, {27,74}, {27,75}, {28,75}, {29,75}, {29,76}, {29,77}, {29,78}, {29,79}, {28,79}, {27,79}, {26,79}, {25,79}, {24,79}, {23,79}, {22,79}, {21,79}, {20,79}, {19,79}, {19,78}, {19,77}, {20,77}, {21,77}, {21,76}, {21,75}, {21,74}, {21,73}, {20,73}, {19,73}, {19,72}, {19,71}, {19,70}, {19,69}, {18,69}, {17,69}, {16,69}, {15,69}, {15,70}, {15,71}, {16,71}, {17,71}, {17,72}, {17,73}, {17,74}, {17,75}, {17,76}, {17,77}, {16,77}, {15,77}, {14,77}, {13,77}, {13,76}, {13,75}, {13,74}, {13,73}, {12,73}, {11,73}, {10,73}, {9,73}, {9,72}, {9,71}, {10,71}, {11,71}, {11,70}, {11,69}, {11,68}, {11,67}, {10,67}, {9,67}, {9,66}, {9,65}, {8,65}, {7,65}, {7,66}, {7,67}, {6,67}, {5,67}, {5,66}, {5,65}, {5,64}, {5,63}, {4,63}, {3,63}, {3,62}, {3,61}, {2,61}, {1,61}, {1,62}, {1,63}, {1,64}, {1,65}, {2,65}, {3,65}, {3,66}, {3,67}, {3,68}, {3,69}, {3,70}, {3,71}, {2,71}, {1,71}, {1,72}, {1,73}, {2,73}, {3,73}, {4,73}, {5,73}, {6,73}, {7,73}, {7,74}, {7,75}, {8,75}, {9,75}, {10,75}, {11,75}, {11,76}, {11,77}, {10,77}, {9,77}, {9,78}, {9,79}, {8,79}, {7,79}, {6,79}, {5,79}, {4,79}, {3,79}, {3,78}, {3,77}, {4,77}, {5,77}, {4,77}, {3,77}, {3,78}, {3,79}, {4,79}, {5,79}, {6,79}, {7,79}, {8,79}, {9,79}, {9,78}, {9,77}, {10,77}, {11,77}, {11,76}, {11,75}, {10,75}, {9,75}, {8,75}, {7,75}, {7,74}, {7,73}, {6,73}, {5,73}, {4,73}, {3,73}, {2,73}, {1,73}, {1,72}, {1,71}, {2,71}, {3,71}, {3,70}, {3,69}, {3,68}, {3,67}, {3,66}, {3,65}, {2,65}, {1,65}, {1,64}, {1,63}, {1,62}, {1,61}, {2,61}, {3,61}, {3,62}, {3,63}, {4,63}, {5,63}, {5,64}, {5,65}, {5,66}, {5,67}, {6,67}, {7,67}, {7,66}, {7,65}, {8,65}, {9,65}, {9,66}, {9,67}, {10,67}, {11,67}, {12,67}, {13,67}, {13,68}, {13,69}, {13,70}, {13,71}, {13,70}, {13,69}, {13,68}, {13,67}, {12,67}, {11,67}, {11,68}, {11,69}, {11,70}, {11,71}, {10,71}, {9,71}, {9,72}, {9,73}, {10,73}, {11,73}, {12,73}, {13,73}, {13,74}, {13,75}, {13,76}, {13,77}, {14,77}, {15,77}, {16,77}, {17,77}, {17,76}, {17,75}, {17,74}, {17,73}, {17,72}, {17,71}, {16,71}, {15,71}, {15,70}, {15,69}, {16,69}, {17,69}, {18,69}, {19,69}, {19,70}, {19,71}, {19,72}, {19,73}, {20,73}, {21,73}, {21,74}, {21,75}, {21,76}, {21,77}, {20,77}, {19,77}, {19,78}, {19,79}, {20,79}, {21,79}, {22,79}, {23,79}, {24,79}, {25,79}, {26,79}, {27,79}, {28,79}, {29,79}, {29,78}, {29,77}, {29,76}, {29,75}, {28,75}, {27,75}, {27,74}, {27,73}, {28,73}, {29,73}, {30,73}, {31,73}, {32,73}, {33,73}, {33,74}, {33,75}, {32,75}, {31,75}, {31,76}, {31,77}, {32,77}, {33,77}, {34,77}, {35,77}, {36,77}, {37,77}, {37,78}, {37,79}, {38,79}, {39,79}, {39,78}, {39,77}, {39,76}, {39,75}, {38,75}, {37,75}, {37,74}, {37,73}, {38,73}, {39,73}, {39,72}, {39,71}, {39,70}, {39,69}, {39,68}, {39,67}, {39,66}, {39,65}, {39,64}, {39,63}, {38,63}, {37,63}, {37,64}, {37,65}, {37,66}, {37,67}, {37,68}, {37,69}, {36,69}, {35,69}, {35,68}, {35,67}, {34,67}, {33,67}, {33,66}, {33,65}, {32,65}, {31,65}, {31,66}, {31,67}, {30,67}, {29,67}, {29,68}, {29,69}, {29,70}, {29,71}, {28,71}, {27,71}, {27,70}, {27,69}, {27,68}, {27,67}, {27,66}, {27,65}, {28,65}, {29,65}, {29,64}, {29,63}, {30,63}, {31,63}, {32,63}, {33,63}, {33,62}, {33,61}, {34,61}, {35,61}, {36,61}, {37,61}, {38,61}, {39,61}, {39,60}, {39,59}, {39,58}, {39,57}, {38,57}, {37,57}, {36,57}, {35,57}, {34,57}, {33,57}, {33,56}, {33,55}, {34,55}, {35,55}, {36,55}, {37,55}, {37,54}, {37,53}, {38,53}, {39,53}, {39,52}, {39,51}, {38,51}, {37,51}, {37,50}, {37,49}, {37,48}, {37,47}, {38,47}, {39,47}, {39,46}, {39,45}, {39,44}, {39,43}, {39,42}, {39,41}, {39,40}, {39,39}, {40,39}, {41,39}, {41,38}, {41,37}, {42,37}, {43,37}, {44,37}, {45,37}, {45,36}, {45,35}, {44,35}, {43,35}, {43,34}, {43,33}, {44,33}, {45,33}, {46,33}, {47,33}, {47,34}, {47,35}, {48,35}, {49,35}, {49,36}, {49,37}, {49,38}, {49,39}, {50,39}, {51,39}, {52,39}, {53,39}, {54,39}, {55,39}, {55,38}, {55,37}, {56,37}, {57,37}, {57,36}, {57,35}, {58,35}, {59,35}, {59,34}, {59,33}, {60,33}, {61,33}, {61,34}, {61,35}, {61,36}, {61,37}, {60,37}, {59,37}, {59,38}, {59,39}, {60,39}, {61,39}, {62,39}, {63,39}, {64,39}, {65,39}, {65,38}, {65,37}, {64,37}, {63,37}, {63,36}, {63,35}, {64,35}, {65,35}, {65,34}, {65,33}, {66,33}, {67,33}, {68,33}, {69,33}, {69,34}, {69,35}, {69,36}, {69,37}, {69,38}, {69,39}, {70,39}, {71,39}, {72,39}, {73,39}, {74,39}, {75,39}, {76,39}, {77,39}, {77,38}, {77,37}, {76,37}, {75,37}, {75,36}, {75,35}, {76,35}, {77,35}, {78,35}, {79,35}, {79,34}, {79,33}, {79,32}, {79,31}, {79,30}, {79,29}, {78,29}, {77,29}, {76,29}, {75,29}, {74,29}, {73,29}, {72,29}, {71,29}, {71,28}, {71,27}, {72,27}, {73,27}, {74,27}, {75,27}, {76,27}, {77,27}, {78,27}, {79,27}, {79,26}, {79,25}, {79,24}, {79,23}, {79,22}, {79,21}, {78,21}, {77,21}, {77,20}, {77,19}, {77,18}, {77,17}, {78,17}, {79,17}, {79,16}, {79,15}, {78,15}, {77,15}, {77,14}, {77,13}, {76,13}, {75,13}, {74,13}, {73,13}, {73,14}, {73,15}, {73,16}, {73,17}, {72,17}, {71,17}, {71,16}, {71,15}, {71,14}, {71,13}, {71,12}, {71,11}, {70,11}, {69,11}, {69,10}, {69,9}, {70,9}, {71,9}, {72,9}, {73,9}, {74,9}, {75,9}, {76,9}, {77,9}, {77,8}, {77,7}, {76,7}, {75,7}, {75,6}, {75,5}, {74,5}, {73,5}, {73,4}, {73,3}, {72,3}, {71,3}, {71,2}, {71,1}, {70,1}, {69,1}, {68,1}, {67,1}, {68,1}, {69,1}, {70,1}, {71,1}, {71,2}, {71,3}, {72,3}, {73,3}, {73,4}, {73,5}, {74,5}, {75,5}, {75,6}, {75,7}, {76,7}, {77,7}, {77,8}, {77,9}, {76,9}, {75,9}, {74,9}, {73,9}, {72,9}, {71,9}, {70,9}, {69,9}, {69,10}, {69,11}, {70,11}, {71,11}, {71,12}, {71,13}, {71,14}, {71,15}, {71,16}, {71,17}, {72,17}, {73,17}, {73,16}, {73,15}, {73,14}, {73,13}, {74,13}, {75,13}, {76,13}, {77,13}, {77,14}, {77,15}, {78,15}, {79,15}, {79,16}, {79,17}, {78,17}, {77,17}, {77,18}, {77,19}, {77,20}, {77,21}, {78,21}, {79,21}, {79,22}, {79,23}, {79,24}, {79,25}, {79,26}, {79,27}, {78,27}, {77,27}, {76,27}, {75,27}, {74,27}, {73,27}, {72,27}, {71,27}, {71,28}, {71,29}, {72,29}, {73,29}, {74,29}, {75,29}, {76,29}, {77,29}, {78,29}, {79,29}, {79,30}, {79,31}, {79,32}, {79,33}, {79,34}, {79,35}, {78,35}, {77,35}, {76,35}, {75,35}, {75,36}, {75,37}, {76,37}, {77,37}, {77,38}, {77,39}, {76,39}, {75,39}, {74,39}, {73,39}, {72,39}, {71,39}, {70,39}, {69,39}, {69,38}, {69,37}, {69,36}, {69,35}, {69,34}, {69,33}, {68,33}, {67,33}, {66,33}, {65,33}, {65,34}, {65,35}, {64,35}, {63,35}, {63,36}, {63,37}, {64,37}, {65,37}, {65,38}, {65,39}, {64,39}, {63,39}, {62,39}, {61,39}, {60,39}, {59,39}, {59,38}, {59,37}, {60,37}, {61,37}, {61,36}, {61,35}, {61,34}, {61,33}, {60,33}, {59,33}, {59,34}, {59,35}, {58,35}, {57,35}, {57,36}, {57,37}, {56,37}, {55,37}, {55,38}, {55,39}, {54,39}, {53,39}, {52,39}, {51,39}, {50,39}, {49,39}, {49,38}, {49,37}, {49,36}, {49,35}, {48,35}, {47,35}, {47,34}, {47,33}, {48,33}, {49,33}, {50,33}, {51,33}, {51,34}, {51,35}, {52,35}, {53,35}, {54,35}, {55,35}, {55,34}, {55,33}, {55,32}, {55,31}, {55,30}, {55,29}, {56,29}, {57,29}, {58,29}, {59,29}, {59,30}, {59,31}, {60,31}, {61,31}, {62,31}, {63,31}, {63,30}, {63,29}, {64,29}, {65,29}, {65,28}, {65,27}, {66,27}, {67,27}, {68,27}, {69,27}, {69,28}, {69,29}, {68,29}, {67,29}, {67,30}, {67,31}, {68,31}, {69,31}, {70,31}, {71,31}, {72,31}, {73,31}, {73,32}, {73,33}, {73,34}, {73,35}, {73,36}, {73,37}, {73,36}, {73,35}, {73,34}, {73,33}, {73,32}, {73,31}, {72,31}, {71,31}, {70,31}, {69,31}, {68,31}, {67,31}, {67,30}, {67,29}, {68,29}, {69,29}, {69,28}, {69,27}, {68,27}, {67,27}, {66,27}, {65,27}, {65,28}, {65,29}, {64,29}, {63,29}, {63,30}, {63,31}, {62,31}, {61,31}, {60,31}, {59,31}, {59,30}, {59,29}, {58,29}, {57,29}, {56,29}, {55,29}, {55,30}, {55,31}, {55,32}, {55,33}, {55,34}, {55,35}, {54,35}, {53,35}, {52,35}, {51,35}, {51,34}, {51,33}, {50,33}, {49,33}, {48,33}, {47,33}, {46,33}, {45,33}, {44,33}, {43,33}, {43,34}, {43,35}, {44,35}, {45,35}, {45,36}, {45,37}, {44,37}, {43,37}, {42,37}, {41,37}, {41,38}, {41,39}, {40,39}, {39,39}, {39,38}, {39,37}, {39,36}, {39,35}, {39,34}, {39,33}, {39,32}, {39,31}, {39,30}, {39,29}, {39,28}, {39,27}, {39,26}, {39,25}, {39,24}, {39,23}, {39,22}, {39,21}, {39,20}, {39,19}, {38,19}, {37,19}, {37,18}, {37,17}, {36,17}, {35,17}, {34,17}, {33,17}, {33,18}, {33,19}, {33,20}, {33,21}, {33,22}, {33,23}, {32,23}, {31,23}, {30,23}, {29,23}, {29,22}, {29,21}, {30,21}, {31,21}, {31,20}, {31,19}, {30,19}, {29,19}, {28,19}, {27,19}, {26,19}, {25,19}, {25,20}, {25,21}, {24,21}, {23,21}, {23,20}, {23,19}, {22,19}, {21,19}, {21,18}, {21,17}, {22,17}, {23,17}, {23,16}, {23,15}, {23,14}, {23,13}, {22,13}, {21,13}, {20,13}, {19,13}, {19,12}, {19,11}, {20,11}, {21,11}, {21,10}, {21,9}, {21,8}, {21,7}, {20,7}, {19,7}, {19,6}, {19,5}, {20,5}, {21,5}, {22,5}, {23,5}, {23,6}, {23,7}, {23,8}, {23,9}, {23,10}, {23,11}, {24,11}, {25,11}, {26,11}, {27,11}, {28,11}, {29,11}, {29,10}, {29,9}, {30,9}, {31,9}, {31,8}, {31,7}, {30,7}, {29,7}, {29,6}, {29,5}, {28,5}, {27,5}, {27,4}, {27,3}, {26,3}, {25,3}, {24,3}, {23,3}, {23,2}, {23,1}, {22,1}, {21,1}, {20,1}, {19,1}, {19,2}, {19,3}, {18,3}, {17,3}, {16,3}, {15,3}, {14,3}, {13,3}, {13,4}, {13,5}, {14,5}, {15,5}, {14,5}, {13,5}, {13,4}, {13,3}, {14,3}, {15,3}, {16,3}, {17,3}, {18,3}, {19,3}, {19,2}, {19,1}, {20,1}, {21,1}, {22,1}, {23,1}, {23,2}, {23,3}, {24,3}, {25,3}, {26,3}, {27,3}, {27,4}, {27,5}, {28,5}, {29,5}, {29,6}, {29,7}, {30,7}, {31,7}, {31,8}, {31,9}, {30,9}, {29,9}, {29,10}, {29,11}, {28,11}, {27,11}, {26,11}, {25,11}, {24,11}, {23,11}, {23,10}, {23,9}, {23,8}, {23,7}, {23,6}, {23,5}, {22,5}, {21,5}, {20,5}, {19,5}, {19,6}, {19,7}, {20,7}, {21,7}, {21,8}, {21,9}, {21,10}, {21,11}, {20,11}, {19,11}, {19,12}, {19,13}, {20,13}, {21,13}, {22,13}, {23,13}, {23,14}, {23,15}, {23,16}, {23,17}, {22,17}, {21,17}, {21,18}, {21,19}, {20,19}, {19,19}, {19,18}, {19,17}, {19,16}, {19,15}, {18,15}, {17,15}, {17,16}, {17,17}, {17,18}, {17,19}, {17,20}, {17,21}, {16,21}, {15,21}, {14,21}, {13,21}, {13,22}, {13,23}, {12,23}, {11,23}, {11,22}, {11,21}, {11,20}, {11,19}, {12,19}, {13,19}, {12,19}, {11,19}, {11,20}, {11,21}, {11,22}, {11,23}, {12,23}, {13,23}, {13,22}, {13,21}, {14,21}, {15,21}, {16,21}, {17,21}, {17,20}, {17,19}, {17,18}, {17,17}, {17,16}, {17,15}, {18,15}, {19,15}, {19,16}, {19,17}, {19,18}, {19,19}, {20,19}, {21,19}, {22,19}, {23,19}, {23,20}, {23,21}, {24,21}, {25,21}, {25,20}, {25,19}, {26,19}, {27,19}, {28,19}, {29,19}, {30,19}, {31,19}, {31,20}, {31,21}, {30,21}, {29,21}, {29,22}, {29,23}, {30,23}, {31,23}, {32,23}, {33,23}, {33,22}, {33,21}, {33,20}, {33,19}, {33,18}, {33,17}, {34,17}, {35,17}, {36,17}, {37,17}, {37,18}, {37,19}, {38,19}, {39,19}, {39,20}, {39,21}, {39,22}, {39,23}, {39,24}, {39,25}, {39,26}, {39,27}, {39,28}, {39,29}, {39,30}, {39,31}, {39,32}, {39,33}, {39,34}, {39,35}, {39,36}, {39,37}, {39,38}, {39,39}, {39,40}, {39,41}, {39,42}, {39,43}, {39,44}, {39,45}, {39,46}, {39,47}, {38,47}, {37,47}, {37,48}, {37,49}, {37,50}, {37,51}, {38,51}, {39,51}, {39,52}, {39,53}, {38,53}, {37,53}, {37,54}, {37,55}, {36,55}, {35,55}, {34,55}, {33,55}, {33,56}, {33,57}, {34,57}, {35,57}, {36,57}, {37,57}, {38,57}, {39,57}, {39,58}, {39,59}, {39,60}, {39,61}, {38,61}, {37,61}, {36,61}, {35,61}, {34,61}, {33,61}, {33,62}, {33,63}, {32,63}, {31,63}, {30,63}, {29,63}, {29,64}, {29,65}, {28,65}, {27,65}, {27,66}, {27,67}, {27,68}, {27,69}, {27,70}, {27,71}, {28,71}, {29,71}, {29,70}, {29,69}, {29,68}, {29,67}, {30,67}, {31,67}, {31,66}, {31,65}, {32,65}, {33,65}, {33,66}, {33,67}, {34,67}, {35,67}, {35,68}, {35,69}, {36,69}, {37,69}, {37,68}, {37,67}, {37,66}, {37,65}, {37,64}, {37,63}, {38,63}, {39,63}, {39,64}, {39,65}, {39,66}, {39,67}, {39,68}, {39,69}, {39,70}, {39,71}, {39,72}, {39,73}, {38,73}, {37,73}, {37,74}, {37,75}, {38,75}, {39,75}, {39,76}, {39,77}, {39,76}, {39,75}, {38,75}, {37,75}, {37,74}, {37,73}, {38,73}, {39,73}, {39,72}, {39,71}, {39,70}, {39,69}, {39,68}, {39,67}, {39,66}, {39,65}, {39,64}, {39,63}, {38,63}, {37,63}, {37,64}, {37,65}, {37,66}, {37,67}, {37,68}, {37,69}, {36,69}, {35,69}, {35,68}, {35,67}, {34,67}, {33,67}, {33,66}, {33,65}, {32,65}, {31,65}, {31,66}, {31,67}, {30,67}, {29,67}, {29,68}, {29,69}, {29,70}, {29,71}, {28,71}, {27,71}, {27,70}, {27,69}, {27,68}, {27,67}, {27,66}, {27,65}, {28,65}, {29,65}, {29,64}, {29,63}, {30,63}, {31,63}, {32,63}, {33,63}, {33,62}, {33,61}, {34,61}, {35,61}, {36,61}, {37,61}, {38,61}, {39,61}, {39,60}, {39,59}, {39,58}, {39,57}, {38,57}, {37,57}, {36,57}, {35,57}, {34,57}, {33,57}, {33,56}, {33,55}, {34,55}, {35,55}, {36,55}, {37,55}, {37,54}, {37,53}, {38,53}, {39,53}, {39,52}, {39,51}, {38,51}, {37,51}, {37,50}, {37,49}, {37,48}, {37,47}, {38,47}, {39,47}, {39,46}, {39,45}, {39,44}, {39,43}, {38,43}, {37,43}, {37,44}, {37,45}, {36,45}, {35,45}, {35,46}, {35,47}, {35,48}, {35,49}, {35,50}, {35,51}, {34,51}, {33,51}, {33,52}, {33,53}, {32,53}, {31,53}, {31,52}, {31,51}, {30,51}, {29,51}, {29,52}, {29,53}, {28,53}, {27,53}, {26,53}, {25,53}, {24,53}, {23,53}, {22,53}, {21,53}, {21,52}, {21,51}, {21,50}, {21,49}, {20,49}, {19,49}, {19,50}, {19,51}, {18,51}, {17,51}, {16,51}, {15,51}, {14,51}, {13,51}, {13,50}, {13,49}, {12,49}, {11,49}, {11,48}, {11,47}, {12,47}, {13,47}, {14,47}, {15,47}, {16,47}, {17,47}, {18,47}, {19,47}, {19,46}, {19,45}, {18,45}, {17,45}, {17,44}, {17,43}, {16,43}, {15,43}, {15,42}, {15,41}, {14,41}, {13,41}, {13,42}, {13,43}, {13,44}, {13,45}, {12,45}, {11,45}, {10,45}, {9,45}, {9,46}, {9,47}, {8,47}, {7,47}, {6,47}, {5,47}, {4,47}, {3,47}, {3,46}, {3,45}, {3,44}, {3,43}, {2,43}, {1,43}, {1,44}, {1,45}, {1,46}, {1,47}, {1,48}, {1,49}, {2,49}, {3,49}, {4,49}, {5,49}, {5,50}, {5,51}, {4,51}, {3,51}, {2,51}, {1,51}, {1,52}, {1,53}, {1,54}, {1,55}, {2,55}, {3,55}, {2,55}, {1,55}, {1,54}, {1,53}, {1,52}, {1,51}, {2,51}, {3,51}, {4,51}, {5,51}, {5,50}, {5,49}, {4,49}, {3,49}, {2,49}, {1,49}, {1,48}, {1,47}, {1,46}, {1,45}, {1,44}, {1,43}, {2,43}, {3,43}, {3,44}, {3,45}, {3,46}, {3,47}, {4,47}, {5,47}, {6,47}, {7,47}, {8,47}, {9,47}, {9,46}, {9,45}, {10,45}, {11,45}, {12,45}, {13,45}, {13,44}, {13,43}, {13,42}, {13,41}, {14,41}, {15,41}, {15,42}, {15,43}, {16,43}, {17,43}, {17,44}, {17,45}, {18,45}, {19,45}, {19,46}, {19,47}, {18,47}, {17,47}, {16,47}, {15,47}, {14,47}, {13,47}, {12,47}, {11,47}, {11,48}, {11,49}, {12,49}, {13,49}, {13,50}, {13,51}, {14,51}, {15,51}, {16,51}, {17,51}, {18,51}, {19,51}, {19,50}, {19,49}, {20,49}, {21,49}, {21,50}, {21,51}, {21,52}, {21,53}, {22,53}, {23,53}, {24,53}, {25,53}, {26,53}, {27,53}, {28,53}, {29,53}, {29,52}, {29,51}, {30,51}, {31,51}, {31,52}, {31,53}, {32,53}, {33,53}, {33,52}, {33,51}, {34,51}, {35,51}, {35,50}, {35,49}, {35,48}, {35,47}, {35,46}, {35,45}, {36,45}, {37,45}, {37,44}, {37,43}, {38,43}, {39,43}, {39,42}, {39,41}, {39,40}};


void get_direction(int command, int& dx, int & dy) {
    switch(command) {
        case NORTH: dx=0;dy=1;break;
        case SOUTH: dx=0;dy=-1;break;
        case WEST: dx=-1;dy=0;break;
        case EAST: dx=1;dy=0;break;
        default:std::cout<<command<<" IS NOT A VALID DIRECTION"<<std::endl;
    }
}

struct key {
    int flower_nr, flower_dist, name;
    bool keys_required[26];
    bool needed_for[26];
    key(int nr, int dist, int nme) {flower_nr = nr,flower_dist=dist;name=nme;for (int i=0;i<26;i++)needed_for[i]=keys_required[i]=false;}
    key(){flower_nr=-1;flower_dist=-1;}
};

struct tile {
	short first;
	short dist=-1;
	bool keys[26];
	tile() {for (int i=0;i<26;i++)keys[i]=false;}
};

struct flower {
    bool flowing = true;
    unsigned px,py,parent=-1,length=0,splitting_length,name=0;
    std::vector<int> children={};
    bool keys[26];
    std::vector<int> doors;
    flower(int pos_x,int pos_y) {px=pos_x;py=pos_y;flowing=true;for(int i=0;i<26;i++)keys[i]=false;}
    flower(){for(int i=0;i<26;i++)keys[i]=false;};
};

bool in_center(int x,int y,int x_a,int y_a) {
	return (x_a-x<=1 && x-x_a<=1 && y-y_a <=2 && y_a-y <=2);
}

int  main() {
    char input[200][200];
    static tile field[200][200];
    std::string line;
    int j=0,x_a,y_a;
    unsigned x_max=0,y_max=0;
    while (true) {
        std::getline(std::cin,line);
        if(line.size()==0)
            break;
        if (x_max < line.size()) {
            x_max=line.size();
        }
        for (int i=0;i<line.size();i++) {
            if (line[i] == '.')
                std::cout<<(input[i][j]=' ');
            else std::cout<<(input[i][j] = line[i]);
            if (line[i]=='@') {
                x_a=i;y_a=j;
            }
        }std::cout<<std::endl;
        j++;
        if (y_max < j)
            y_max=j;
    }
    static bool keys[26];
    for (int step=path.size()-1;step>=0;step--) {
		//std::cout<<"\n\nSTEP "<<step<<":\n";
		char on_pos=input[path[step].first][path[step].second];
		if ('a' <= on_pos && on_pos <= 'z' && !keys[on_pos-'a']){keys[on_pos-'a']=true;std::cout<<on_pos<<' ';}
		else if ('A'<=on_pos && on_pos <='Z' && !keys[on_pos-'A'])std::cout<<"MISSING KEY FOR "<<on_pos<<std::endl;
		if(false)for (int j=0;j<y_max;j++) {
			for (int i=0;i<x_max;i++)
			    std::cout<<(path[step].first == i && path[step].second == j? '$' : input[i][j]);
			std::cout<<std::endl;
		}
	}
	std::cout<<"Missing keys: "<<std::endl;
	for(int i=0;i<26;i++)if (!keys[i])std::cout<<static_cast<char>(i+'a')<<' ';
	std::cout<<std::endl;
	//return 1;
    for(unsigned j=0;j<y_max;j++){for(unsigned i=0;i<x_max;i++)std::cout<<(input[i][j]=='#'?' ':(input[i][j]==' '?'%':input[i][j]));std::cout<<std::endl;}
    
    flower myflowers[200];
    bool flowed,flowing=true;
    static key mykeys[26];
    int flower_cnt=4,px,py;
    // Well, the center is a mess.
    myflowers[0]=flower(x_a-1,y_a-1);
    myflowers[1]=flower(x_a-1,y_a+1);
    myflowers[1].name=1;
    myflowers[2]=flower(x_a+1,y_a-1);
    myflowers[2].name=2;
    myflowers[3]=flower(x_a+1,y_a+1);
    myflowers[3].name=3;
    input[x_a-1][y_a-1]='#';input[x_a-1][y_a+1]='#';input[x_a+1][y_a-1]='#';input[x_a+1][y_a+1]='#';
    input[x_a-1][y_a]='#';input[x_a][y_a+1]='#';input[x_a][y_a-1]='#';input[x_a+1][y_a]='#';
    int cnt=0,dx,dy;
    // Make a tree with the code from 15.2
    while (flowing) {
        flowing = false;
        int dummy=flower_cnt;
        for (int flwr=0;flwr<dummy;flwr++) {
            if (!myflowers[flwr].flowing){
                continue;
            }
            px=myflowers[flwr].px;
            py=myflowers[flwr].py;
            flowed = false;
            int cur_flower=flwr;
            for (int i=1;i<=4;i++) {
                get_direction(i,dx,dy);
                if ((input[px+dx][py+dy]==' ' || (input[px+dx][py+dy]<='Z'&&input[px+dx][py+dy]>='A') || (input[px+dx][py+dy]<='z'&&input[px+dx][py+dy]>='a'))) {
                    if (!flowed) {
                        myflowers[flwr].px = px+dx;
                        myflowers[flwr].py = py+dy;
                        myflowers[flwr].length++;
                        field[px+dx][py+dy].first = flwr+1;
                        field[px+dx][py+dy].dist = myflowers[flwr].length;
                    } else {
                        myflowers[flower_cnt]=flower(px+dx,py+dy);
                        myflowers[flower_cnt].parent = flwr;
                        myflowers[flower_cnt].splitting_length = myflowers[flwr].length;
                        for (auto k : myflowers[flwr].doors) myflowers[flower_cnt].doors.push_back(k);
                        for (int i=0;i<26;i++) myflowers[flower_cnt].keys[i]=myflowers[flwr].keys[i];
                        myflowers[flower_cnt].length = myflowers[flwr].length;
                        myflowers[flower_cnt].name = flower_cnt;
                        myflowers[flwr].children.push_back(flower_cnt);
                        cur_flower = flower_cnt;
                        flower_cnt++;
                    }
                    if ('A'<=input[px+dx][py+dy]&&input[px+dx][py+dy]<='Z') {
                        //std::cout<<"FLOWER "<<flwr<<" NEEDS KEY "<<input[px+dx][py+dy]<<std::endl;
                        myflowers[cur_flower].doors.push_back(input[px+dx][py+dy] - 'A');
                     }
                     else if ('a'<=input[px+dx][py+dy]&&input[px+dx][py+dy]<='z') {
						 int key_nr = input[px+dx][py+dy] - 'a';
                         myflowers[cur_flower].keys[key_nr]=true;
                         mykeys[key_nr] = key(flwr,myflowers[cur_flower].length, key_nr);
                         int x=px+dx,y=py+dy;
                         field[px+dx][py+dy].dist = myflowers[cur_flower].length + 1;
                         while (field[x][y].dist >= 1) {
                             field[x][y].keys[key_nr]=true;
                             if (field[x+1][y].dist!=-1 && field[x+1][y].dist < field[x][y].dist)
                                 x++;
						     else if (field[x-1][y].dist!=-1 && field[x-1][y].dist < field[x][y].dist)
						         x--;
						     else if (field[x][y+1].dist!=-1 && field[x][y+1].dist < field[x][y].dist)
						         y++;
						     else if (field[x][y-1].dist!=-1 && field[x][y-1].dist < field[x][y].dist)
						         y--;
						     else if (field[x][y].dist == 1) break;
						     else std::cout<<"HELP!!!"<<std::endl;
					     }
                         for (auto akey : myflowers[cur_flower].doors)
                             if (!myflowers[cur_flower].keys[akey])
                                 mykeys[key_nr].keys_required[akey]=true;
                     }
                    if (input[px+dx][py+dy]<='Z'&&input[px+dx][py+dy]>='A')
						input[px+dx][py+dy] = input[px+dx][py+dy]-'A'+'#'+1;// +32;
					else if(input[px+dx][py+dy]<='z'&&input[px+dx][py+dy]>='a')
						input[px+dx][py+dy] = input[px+dx][py+dy]-'a';
					else
						input[px+dx][py+dy] = '!';//flwr %10 + '0';
					field[px+dx][py+dy].first = cur_flower+1;
					field[px+dx][py+dy].dist = myflowers[cur_flower].length;
                    flowed = true;
                }
            }
            if (!flowed) {
                //std::cout<<flwr<<" DIED"<<std::endl;
                myflowers[flwr].flowing = false;
            }
            if (myflowers[flwr].flowing) {
                flowing = true;
            }
        }
        /*std::cout<<"\nAFTER "<<cnt+1<<" MINUTES:"<<std::endl;
        for(int j=0;j<y_max;j++){
           for(int i=0;i<x_max;i++){
                   std::cout<<(field[i][j].first?static_cast<char>((field[i][j].first-1)%10+'0'):' ');
           }std::cout<<std::endl;
        }*/
        for (int i=0;i<flower_cnt;i++) {
            if(myflowers[i].flowing && false)
                std::cout<<"FLOWER "<<i<<" HAS LENGTH "<<myflowers[i].length<<std::endl;
        }
        ++cnt;
    }

    unsigned max_dist = 0;
    int max_index;
    static bool keys_needed[26];
    for (int i=0;i<26;i++){
        if (mykeys[i].flower_dist>max_dist){
            max_dist=mykeys[i].flower_dist;
            max_index=i;
        }
        std::cout<<"KEY "<<static_cast<char>(mykeys[i].name+'a')<<" IS FOUND ON "<<mykeys[i].flower_nr<<"\tAFTER "<<mykeys[i].flower_dist<<",\tAND WE NEED ";for (int j=0;j<26;j++){if (mykeys[i].keys_required[j])std::cout<<static_cast<char>(j+'a')<<' ';keys_needed[j]=true;}std::cout<<std::endl;
    }
    std::cout<<" LAST KEY WILL BE "<<static_cast<char>(max_index + 'a')<<" AFTER "<<max_dist<<" STEPS"<<std::endl;
    std::cout<<" KEYS NOT NEEDED ARE ";for (int i=0;i<26;i++)if(!keys_needed[i])std::cout<<static_cast<char>(i+'a')<<' ';
    std::cout<<std::endl;

    // Make some things nice.
    for(auto fl : myflowers) {
        int fl_nr = fl.parent;
        while (fl_nr != -1) {
            for (int i=0;i<26;i++)
                if (fl.keys[i])
                    myflowers[fl_nr].keys[i]=true;
            fl_nr = myflowers[fl_nr].parent;
        }
    }
    for (int i=0;i<26;i++) {
		for (int j=0;j<26;j++)
		    if(mykeys[i].keys_required[j])
		        mykeys[j].needed_for[i]=true;
	}

    // I think this is the optimal sequence to get all the keys, I made it by hand.
    //const int sequence[12]={'w'-'a','f'-'a','q'-'a','g'-'a','a'-'a','c'-'a','v'-'a','s'-'a','j'-'a','u'-'a','z'-'a','b'-'a'};

//    static bool keys[26];

    // Discard useless pixels, and output the data acquired.
    for (int j=0;j<y_max;j++){for(int i = 0;i<x_max;i++){int key_cnt=0;for(int k=0;k<26;k++)if(field[i][j].keys[k])key_cnt++;if (key_cnt==0)field[i][j].dist = -1;std::cout<<(input[i][j]<32 ? std::string(" ") + std::string(1,static_cast<char>(input[i][j] + 'a')) : (key_cnt == 0 ? "  " : std::string(key_cnt < 10 ? " ":"") + std::to_string(key_cnt)));}std::cout<<std::endl;}
    for (int j=0;j<y_max;j++){for(int i = 0;i<x_max;i++){std::cout<<(input[i][j] < 32 ? ".." + std::string(1,static_cast<char>(input[i][j]+'a')) : (field[i][j].dist == -1 ? "   " : std::string(field[i][j].dist < 100 ? " " : "" ) + std::string(field[i][j].dist < 10 ? " ":"") + std::to_string(field[i][j].dist)));}std::cout<<std::endl;}
    for (int j=0;j<y_max;j++){for(int i = 0;i<x_max;i++){std::cout<<(field[i][j].dist==-1? ' ' : '.');}std::cout<<std::endl;}
    for (int j=0;j<y_max;j++){for(int i = 0;i<x_max;i++){std::cout<<(field[i][j].dist==-1? '#' : (input[i][j] <= 'z'-'a' ? static_cast<char>(input[i][j] + 'a') : (input[i][j]<='Z'-'A'+'#'+1 && input[i][j]>='#'+1 ? static_cast<char>(input[i][j]+'A'-'#'-1) : '.' )));}std::cout<<std::endl;}

    // Walk over the maze following this route
    std::vector<int> route[4] = {
         std::vector<int>({1,'f','q','w','r','j','m'}),
         std::vector<int>({0,'a','c','h','b'}),
         std::vector<int>({3,'u','k','l','t','z','g'}),
         std::vector<int>({2,'e','s','d','i','n','p','x','y','v','o'})
    };

    int walker_x = x_a,walker_y=y_a,total_steps = 0, key_cnt=0;
    for (int i=0;i<26;i++)keys[i]=false;

    for (int route_step=0;route_step<4;route_step++) {
        int dx,dy;
        switch(route[route_step][0]) {
            case 0:dx=-1;dy=-2;break;
            case 1:dx=-1;dy=2;break;
            case 2:dx=1;dy=-2;break;
            case 3:dx=1;dy=2;break;
            default: std::cout<<"UNKNOWN FIRST DIRECTION: "<<route[route_step][0];
        }
        
        if (walker_y - y_a == 2){walker_y--;total_steps++;}
        if (walker_y - y_a == -2){walker_y++;total_steps++;}
        while (walker_x - (x_a+dx) != 0 || walker_y - (y_a+dy) != 0) {
            if (walker_x - (x_a+dx) == 0) {
                if (walker_y < (y_a+dy)) {
                    walker_y++;
                }else
                    walker_y--;
            } else {
                if (walker_x < (x_a+dx))
                    walker_x++;
                else
                    walker_x--;
            }
            
			for(int j=0;j<y_max;j++){
			   for(int i=0;i<x_max;i++) {
					   if (i==walker_x&&j==walker_y)
						   std::cout<<'W';
					   else
						   std::cout<<static_cast<char>(field[i][j].dist != -1 ? ( input[i][j]<32 ? input[i][j] + 'a' : '.'):' ');
			   }std::cout<<std::endl;
			}
        }
        std::cout<<"\nAT "<<walker_x-x_a<<','<<walker_y-y_a<<", SHOULD BE "<<route[route_step][0]-1<<", i.e. "<<dx<<','<<dy<<", HAS DONE "<<total_steps<<" STEPS"<<std::endl;
        for( auto a :route){for(auto b:a)if (b<32)std::cout<<b<<' '; else std::cout<<static_cast<char>(b)<<' ';std::cout<<std::endl;}
        
        for(int j=0;j<y_max;j++){
           for(int i=0;i<x_max;i++) {
                   if (i==walker_x&&j==walker_y)
                       std::cout<<'W';
                   else
                       std::cout<<static_cast<char>(field[i][j].dist != -1 ? ( input[i][j]<32 ? input[i][j] + 'a' : '.'):' ');
           }std::cout<<std::endl;
        }
        do {
			int dx,dy;
			bool walking_back = true;
			for (int i=1;i<route[route_step].size();i++) {
				if (field[walker_x][walker_y].keys[route[route_step][i]-'a'] && !keys[route[route_step][i]-'a']){// There is still a key we need on this path.
				    walking_back = false;
				    break;
				}
			}
			bool did_break = false;
			for (int i=1;i<=4;i++) {
				get_direction(i,dx,dy);
				if (field[walker_x+dx][walker_y+dy].dist != -1) {
					if (walking_back && field[walker_x+dx][walker_y+dy].dist < field[walker_x][walker_y].dist){
					    did_break = true;
					    break;
					}
					if (!walking_back && field[walker_x+dx][walker_y+dy].dist > field[walker_x][walker_y].dist) {
						bool this_way=false;
						for (int i=1;i<route[route_step].size();i++) {
							if (!keys[route[route_step][i]-'a'] && field[walker_x+dx][walker_y+dy].keys[route[route_step][i]-'a']){// There is still a key we need on this path.
								std::cout<<static_cast<char>(route[route_step][i])<<" FOUND"<<std::endl;
								this_way = true;
								break;
							}
						}
						if (this_way) {
							did_break = true;
						    break;
						}
					}
				}

			}
			if (!did_break)std::cout<<"THIS IS NOT SUPPOSED TO HAPPEN"<<std::endl;
			walker_x +=dx;
			walker_y +=dy;
			total_steps++;
			for(int j=0;j<y_max;j++){
			   for(int i=0;i<x_max;i++) {
					   if (i==walker_x&&j==walker_y)
						   std::cout<<'W';
					   else
						   std::cout<<static_cast<char>(field[i][j].dist != -1 ? ( input[i][j]<32 ? input[i][j] + 'a' : '.'):' ');
			   }std::cout<<std::endl;
			}
			if (input[walker_x][walker_y] < 32) {// We found a key!
				if (!keys[static_cast<int>(input[walker_x][walker_y])]) key_cnt++;// A new one!
				keys[static_cast<int>(input[walker_x][walker_y])] = true;
				if (key_cnt == 26)break;
			}
		} while (!in_center(walker_x,walker_y,x_a,y_a));
    }
    std::cout<<"ANSWER: "<<total_steps<<'='<<(200-194)*2+116*2 + 258 + (62-24)*2+(164-110)*2+(212-186)*2+272+(86-58)*2+290+(70-16)*2+(184-122)*2+400<<std::endl;

    return 0;
}
